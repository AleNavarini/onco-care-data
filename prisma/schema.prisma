generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "cockroachdb"
  url      = env("DATABASE_URL")
}

model User {
  id       BigInt  @id @default(autoincrement())
  email    String  @unique
  name     String?
  password String
}

model Patient {
  id                BigInt            @id @default(autoincrement())
  dni               String
  name              String?
  dateOfBirth       DateTime?
  phone             String?
  email             String?
  address           String?
  healthInsurance   String?
  clinicHistory     BigInt?
  affiliatoryData   AffiliatoryData?
  gestations        Gestation[]
  symptoms          Symptom[]
  previousSurgeries PreviousSurgery[]
  disease           Disease?
  riskFactors       RiskFactor[]
  stagings          Staging[]
  followUps         FollowUp[]
  studies           Study[]
}

model AffiliatoryData {
  id                      BigInt    @id @default(autoincrement())
  patient                 Patient?  @relation(fields: [patientId], references: [id])
  patientId               BigInt?   @unique
  firstConsult            DateTime?
  institution             String?
  doctor                  String?
  bmi                     Decimal?
  usualMedication         String?
  socialWorkIntervention  String?
  firstPregnancyAge       Int?
  lastPregnancyAge        Int?
  contraception           String?
  currentPregnancyControl String?
}

model Gestation {
  id        BigInt   @id @default(autoincrement())
  patient   Patient? @relation(fields: [patientId], references: [id])
  patientId BigInt?
  birth     Boolean?
  abortion  Boolean?
  cesarean  Boolean?
}

model Symptom {
  id        BigInt   @id @default(autoincrement())
  patient   Patient? @relation(fields: [patientId], references: [id])
  patientId BigInt?
  name      String
  value     String?
}

model PreviousSurgery {
  id           BigInt   @id @default(autoincrement())
  patient      Patient? @relation(fields: [patientId], references: [id])
  patientId    BigInt?
  surgeryType  String
  observations String?
}

model Disease {
  id          BigInt       @id @default(autoincrement())
  name        String
  patient     Patient?     @relation(fields: [patientId], references: [id])
  patientId   BigInt?      @unique
  riskFactors RiskFactor[]
}

model RiskFactor {
  id        BigInt   @id @default(autoincrement())
  name      String
  value     String?
  disease   Disease? @relation(fields: [diseaseId], references: [id])
  diseaseId BigInt?
  patient   Patient? @relation(fields: [patientId], references: [id])
  patientId BigInt?
}

model Staging {
  id        BigInt   @id @default(autoincrement())
  patient   Patient? @relation(fields: [patientId], references: [id])
  patientId BigInt?
  date      DateTime
  type      String
  figo      String
}

model FollowUp {
  id             BigInt   @id @default(autoincrement())
  patient        Patient? @relation(fields: [patientId], references: [id])
  patientId      BigInt?
  date           DateTime
  attended       Boolean?
  hasDisease     Boolean?
  recurrenceSite String?
  died           Boolean?
  causeOfDeath   String?
  observations   String?
}

model StudyType {
  id         BigInt               @id @default(autoincrement())
  name       String
  attributes StudyTypeAttribute[]
  studies    Study[]
}

model StudyTypeAttribute {
  id          BigInt    @id @default(autoincrement())
  studyTypeId BigInt
  studyType   StudyType @relation(fields: [studyTypeId], references: [id])
  name        String
  value       String?
  studyId     BigInt?
  study       Study?     @relation(fields: [studyId], references: [id])
}

model Study {
  id                  BigInt               @id @default(autoincrement())
  date           DateTime
  studyTypeId         BigInt
  studyType           StudyType            @relation(fields: [studyTypeId], references: [id])
  patient             Patient?             @relation(fields: [patientId], references: [id])
  patientId           BigInt?
  studyTypeAttributes StudyTypeAttribute[]
}
